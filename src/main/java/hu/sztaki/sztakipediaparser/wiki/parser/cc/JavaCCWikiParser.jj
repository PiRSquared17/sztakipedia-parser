/*
 * Sztakipedia parser - http://http://code.google.com/p/sztakipedia-parser
 *
 * Copyright (C) 2011 MTA SZTAKI 
 * Copyright (C) 2011 Tibor Olah
 *
 * Sztakipedia parser is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * Sztakipedia parser is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Sztakipedia parser; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
 * USA
 */ 
 
/**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */options{	JDK_VERSION = "1.6";	UNICODE_INPUT = true;	static = false;} PARSER_BEGIN(JavaCCWikiParser)
package hu.sztaki.sztakipediaparser.wiki.parser.cc;
import java.util.logging.Logger;import java.util.Stack;import java.util.ArrayList;import java.util.HashMap;
import hu.sztaki.sztakipediaparser.wiki.parser.*;import hu.sztaki.sztakipediaparser.wiki.converter.IWikiInterpreter;import hu.sztaki.sztakipediaparser.wiki.tags.*;/**
 * Wiki parser generated by JavaCC.
 * 
 * @author <a href="mailto:sztakipedia@sztaki.hu">Tibor Olah</a>, <a
 *         href="http://sztaki.hu">MTA SZTAKI</a>
 * @since 2011
 */public class JavaCCWikiParser implements IWikiParser{	private IWikiInterpreter c;	private Logger log = Logger.getLogger(this.getClass().getName());	String buf = "";	public void parse(IWikiInterpreter c)	{		this.c = c;		try		{			start();		}		catch (ParseException e)		{			//log.severe(e.getMessage());
			// Add raw wiki tag			c.addRawWikiTag(buf);			reset();			Token t = getNextToken();			if (t != null && t.kind != JavaCCWikiParserConstants.EOF)			{				parse(c);			}		}		catch (TokenMgrError e)		{			//log.severe(e.getMessage());
			// Add raw wiki tag			c.addRawWikiTag(buf);			reset();			Token t = getNextToken();			if (t != null && t.kind != JavaCCWikiParserConstants.EOF)			{				parse(c);			}		}	}	public void reset()	{		buf = "";	}}PARSER_END(JavaCCWikiParser)void start() :{}{	(		extLink()	|	intLink()	|	boldItalic()	|	bold()	|	italic()	|	template()	|	table()	|	reference()	|	LOOKAHEAD(2)		list()	|	LOOKAHEAD(2)		heading()	|	LOOKAHEAD(3)		hr()	|	LOOKAHEAD(3)		indent()	|	stringTag(true)	)+	< EOF >}void reference() :{	Token t = null;	String str = "";	int depth = 0;}{	t = < REFOPEN >	{		buf += t.image;	}	(		t = < REFOPEN >		{			buf += t.image;		}		{			str += t.image;			++depth;		}	|			t = < REFCLOSE >		{			buf += t.image;			 		}		{			if (depth == 0)			{				c.addReferenceTag(str);				reset();				return;			}			else			{				--depth;				str += t.image;			}		}	|			t = < TABLE_START >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < TABLE_END >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < TABLE_CAPTION >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < TABLE_ROW >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < TABLE_COL_HEADING >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < TABLE_ROW_HEADING >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < DOCURL >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < DCCURL >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < OBRACKET >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < DOBRACKET >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < CBRACKET >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < DCBRACKET >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < ITALIC >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < BOLD >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < BOLDITALIC >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < SECTION_HEADING >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < SUBSECTION_HEADING >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < SUB_SUBSECTION_HEADING >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < LIST >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < INDENT >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < HR >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < NEWLINE >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < PIPE >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < SPACE >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < NOTSPACE >		{			buf += t.image;			 		}		{			str += t.image;		}	)+}void table() :{	Token t = null;	String tableParams = "";	String caption = "";}{	// Start table with {|
	t = < TABLE_START >	{		buf += t.image;		 	}	// Optional table parameters
	[ tableParams = tableParams() ] 	t = < NEWLINE >	{		buf += t.image;		 	}	// Optional table caption started with |+
	[		t = < TABLE_CAPTION >		{			buf += t.image;			 		}		caption = tableCaption() t = < NEWLINE >		{			buf += t.image;			 		}	]	{		// Start a new table in the converter
		c.startTable(tableParams, caption);	}	// Optional column headings.
	(		tableColHeading()	)*	// Table rows
	(		tableRow()	)+	// End of table marked by |}
	t = < TABLE_END >	{		buf += t.image;		 	}	{		c.endTable();		reset();	}}String tableParams() :{	Token t = null;	String params = "";}{	params = stringTagWithoutNewline(false)	{		return params;	}}String tableCaption() :{	Token t = null;	String caption = "";}{	caption = stringTagWithoutNewline(false)	{		return caption;	}}void tableColHeading() :{	Token t = null;	String heading = "";	String params = "";}{	// Start of the heading
	t = < TABLE_COL_HEADING >	{		buf += t.image;		 	}	// Optional format modifiers
	//[ params = stringTagWithoutNewlineAndPipe(false) t = < PIPE > {   } ]
	// Heading content
	heading = stringTagWithoutNewline(false) 	// Closing new line
	t = < NEWLINE >	{		buf += t.image;		 	}	{		c.addTableColHeading(heading, params);	}}void tableRow() :{	Token t = null;	String params = "";}{	// Start of a row
	t = < TABLE_ROW >	{		buf += t.image;		 	}	// Optional format modifiers
	[ params = stringTagWithoutNewline(false) ] 	t = < NEWLINE >	{		buf += t.image;		 	}	{		c.startTableRow(params);	}	// Optional row heading or column headings
	[		(			tableColHeading()		)+	|			tableRowHeading()	]	// Table cells
	(		tableCell()	)*	{		c.endTableRow();	}}void tableRowHeading() :{	Token t = null;	String heading = "";	String params = "";}{	// Start of the heading
	t = < TABLE_ROW_HEADING >	{		buf += t.image;		 	}	// Optional format modifiers
	//[ params = stringTagWithoutNewlineAndPipe(false) t = < PIPE > {   } ]
	// Heading content
	heading = stringTagWithoutNewline(false) 	// Closing new line
	t = < NEWLINE >	{		buf += t.image;		 	}	{		c.addTableRowHeading(heading, params);	}}void tableCell() :{	Token t = null;	String params = "";	String content = "";	String content2 = "";}{	t = < PIPE >	{		buf += t.image;		 	}	// Optional format modifiers
	//[ params = stringTagWithoutNewlineAndPipe(false) t = < PIPE > {   } ]
	// Cell content
	(		content2 = stringTagWithoutNewlineAndPipe(false)		{			content += content2;		}	|			LOOKAHEAD({ getToken(1).kind == PIPE && getToken(2).kind != PIPE })		(			t = < PIPE >			{				buf += t.image;				 			}			{				content += t.image;			}		)	|		(			t = < PIPE >			{				buf += t.image;				 			}			t = < PIPE >			{				buf += t.image;				 			}			{				c.addTableCell(content, params);				content = "";				content2 = "";				params = "";			}		)	)+	t = < NEWLINE >	{		buf += t.image;		 	}	{		c.addTableCell(content, params);	}}void template() :{	Token t = null;	int curls = 0;	String str = "";	boolean multiline = false;}{	t = < DOCURL >	{		buf += t.image;		 	}	(		t = < DOCURL >		{			buf += t.image;			 		}		{			str += t.image;			++curls;		}	|			t = < DCCURL >		{			buf += t.image;			 		}		{			if (curls > 0)			{				str += t.image;				--curls;			}			else			{				if (!str.isEmpty())				{					c.addTemplate(str, multiline);					reset();				}				return;			}		}	|			t = < SPACE >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < ITALIC >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < BOLD >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < BOLDITALIC >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < OBRACKET >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < DOBRACKET >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < CBRACKET >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < DCBRACKET >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < SECTION_HEADING >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < SUBSECTION_HEADING >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < SUB_SUBSECTION_HEADING >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < HR >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < INDENT >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < TABLE_COL_HEADING >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < TABLE_ROW_HEADING >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < TABLE_START >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < TABLE_END >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < TABLE_CAPTION >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < TABLE_ROW >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < PIPE >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < NEWLINE >		{			buf += t.image;			 		}		{			str += t.image;			multiline = true;		}	|			t = < NOTSPACE >		{			buf += t.image;			 		}		{			str += t.image;		}	)+}void heading() :{	Token t = null;	int type;}{	t = < NEWLINE >	{		buf += t.image;		 	}	(		(			t = < SECTION_HEADING >			{				buf += t.image;				 			}			{				c.startSectionHeading("==");			}			inHeading() 			t = < SECTION_HEADING >			{				buf += t.image;				 			}			{				type = 1;			}		)	|		(			t = < SUBSECTION_HEADING >			{				buf += t.image;				 			}			{				c.startSubSectionHeading("===");			}			inHeading() 			t = < SUBSECTION_HEADING >			{				buf += t.image;				 			}			{				type = 2;			}		)	|		(			t = < SUB_SUBSECTION_HEADING >			{				buf += t.image;				 			}			{				c.startSubSubSectionHeading("====");			}			inHeading() 			t = < SUB_SUBSECTION_HEADING >			{				buf += t.image;				 			}			{				type = 3;			}		)	)	LOOKAHEAD({ getToken(1).kind == NEWLINE })	{		if (type == 1) 		c.endSectionHeading();		else if (type == 2) 		c.endSubSectionHeading();		else 		c.endSubSubSectionHeading();		reset();	}}void inHeading() :{}{	(		extLink()	|	intLink()	|	template()	|	boldItalic()	|	bold()	|	italic()	|	stringTagWithoutNewline(true)	)+}void extLink() :{	Token t = null;	String url = "";	String alias = "";}{	t = < OBRACKET >	{		buf += t.image;		 	}	{		url = exturl();	}	[		t = < SPACE >		{			buf += t.image;			 		}		{			// Parse alias			alias = extLinkAlias();		}	]	t = < CBRACKET >	{		buf += t.image;		 	}	{		c.addExternalLinkTag(url, alias, false, "");		reset();	}}void intLink() :{	Token t = null;	String url = "";	ArrayList < String > params = new ArrayList < String > ();}{	t = < DOBRACKET >	{		buf += t.image;		 	}	{		// Get url		url = inturl();	}	(		t = < PIPE >		{			buf += t.image;			 		}		{			// Parse parameters			params.add(intLinkParam());		}	)*	t = < DCBRACKET >	{		buf += t.image;		 	}	{		c.addInternalLinkTag(url, params, "");		reset();	}}void boldItalic() :{	Token t = null;}{	t = < BOLDITALIC >	{		buf += t.image;		 	}	{		c.startBoldTag("'''");		c.startItalicTag("''");	}	(		extLink()	|	intLink()	|	template()	|	table()	|	LOOKAHEAD(2)		heading()	|	LOOKAHEAD(3)		hr()	|	LOOKAHEAD(3)		indent()	|	stringTag(true)	)+	t = < BOLDITALIC >	{		buf += t.image;		 	}	{		c.endItalicTag();		c.endBoldTag();		reset();	}}void bold() :{	Token t = null;}{	t = < BOLD >	{		buf += t.image;		 	}	{		c.startBoldTag("'''");	}	(		extLink()	|	intLink()	|	italic()	|	template()	|	table()	|	LOOKAHEAD(2)		heading()	|	LOOKAHEAD(3)		hr()	|	LOOKAHEAD(3)		indent()	|	stringTag(true)	)+	t = < BOLD >	{		buf += t.image;		 	}	{		c.endBoldTag();		reset();	}}void italic() :{	Token t = null;}{	t = < ITALIC >	{		buf += t.image;		 	}	{		c.startItalicTag("''");	}	(		extLink()	|	intLink()	|	bold()	|	template()	|	table()	|	LOOKAHEAD(2)		heading()	|	LOOKAHEAD(3)		hr()	|	LOOKAHEAD(3)		indent()	|	stringTag(true)	)+	t = < ITALIC >	{		buf += t.image;		 	}	{		c.endItalicTag();		reset();	}}void list() :{	Token t = null;	int level = 0;}{	(		LOOKAHEAD(2)		(			LOOKAHEAD(4)			(				t = < NEWLINE >				{					buf += t.image;					 				}				t = < LIST >				{					buf += t.image;					 				}				t = < LIST >				{					buf += t.image;					 				}				t = < LIST >				{					buf += t.image;					 				}				{					if (level == 2)					{						++level;						c.startList(true);					}					else if (level != 3)					{						throw new ParseException();					}				}			)		|				LOOKAHEAD(3)			(				t = < NEWLINE >				{					buf += t.image;					 				}				t = < LIST >				{					buf += t.image;					 				}				t = < LIST >				{					buf += t.image;					 				}				{					if (level == 1)					{						++level;						c.startList(true);					}					else if (level == 3)					{						--level;						c.endList();					}					else if (level != 2)					{						throw new ParseException();					}				}			)		|			(				t = < NEWLINE >				{					buf += t.image;					 				}				t = < LIST >				{					buf += t.image;					 				}				{					if (level == 0)					{						++level;						c.startList(false);					}					else if (level == 2)					{						--level;						c.endList();					}					else if (level == 3)					{						level -= 2;						c.endList();						c.endList();					}					else if (level != 1)					{						throw new ParseException();					}				}			)		)		// Get content
		listItem()	)+	t = < NEWLINE >	{		buf += t.image;		 	}	{		if (level == 1)		{			c.endList();		}		else if (level == 2)		{			c.endList();			c.endList();		}		else if (level == 3)		{			c.endList();			c.endList();			c.endList();		}		reset();	}}void listItem() :{	Token t = null;	String str = "";}{	(		t = < HR >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < SUB_SUBSECTION_HEADING >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < SUBSECTION_HEADING >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < SECTION_HEADING >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < BOLDITALIC >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < BOLD >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < ITALIC >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < DOCURL >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < DCCURL >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < OBRACKET >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < CBRACKET >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < DOBRACKET >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < DCBRACKET >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < TABLE_COL_HEADING >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < TABLE_ROW_HEADING >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < TABLE_START >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < TABLE_END >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < TABLE_CAPTION >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < TABLE_ROW >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < PIPE >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < INDENT >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < LIST >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < SPACE >		{			buf += t.image;			 		}		{			str += t.image;		}	|	t = < NOTSPACE >		{			buf += t.image;			 		}		{			str += t.image;		}	)+	{		if (!str.isEmpty())		{			c.addListItem(str);		}	}}void indent() :{	Token t = null;	int level = 0;}{	t = < NEWLINE >	{		buf += t.image;		 	}	t = < INDENT >	{		buf += t.image;		 	}	{		++level;	}	[		t = < INDENT >		{			buf += t.image;			 		}		{			++level;		}		[			t = < INDENT >			{				buf += t.image;				 			}			{				++level;			}		]	]	{		c.addIndentTag(":", level);		reset();	}}void hr() :{	Token t = null;	String str = "";}{	t = < NEWLINE >	{		buf += t.image;		 	}	{		str += t.image;	}	t = < HR >	{		buf += t.image;		 	}	{		str += t.image;	}	t = < NEWLINE >	{		buf += t.image;		 	}	{		str += t.image;		c.addHorizontalRuler("----");		reset();	}}String intLinkParam() :{	Token t = null;	String param = "";	int brackets = 0;}{	(		t = < SPACE >		{			buf += t.image;			 		}		{			param += t.image;		}	|			t = < ITALIC >		{			buf += t.image;			 		}		{			param += t.image;		}	|			t = < BOLD >		{			buf += t.image;			 		}		{			param += t.image;		}	|			t = < BOLDITALIC >		{			buf += t.image;			 		}		{			param += t.image;		}	|			t = < SECTION_HEADING >		{			buf += t.image;			 		}		{			param += t.image;		}	|			t = < SUBSECTION_HEADING >		{			buf += t.image;			 		}		{			param += t.image;		}	|			t = < SUB_SUBSECTION_HEADING >		{			buf += t.image;			 		}		{			param += t.image;		}	|			t = < HR >		{			buf += t.image;			 		}		{			param += t.image;		}	|			t = < DOCURL >		{			buf += t.image;			 		}		{			param += t.image;		}	|			t = < DCCURL >		{			buf += t.image;			 		}		{			param += t.image;		}	|			t = < OBRACKET >		{			buf += t.image;			 		}		{			param += t.image;		}	|			t = < CBRACKET >		{			buf += t.image;			 		}		{			param += t.image;		}	|	t = < DOBRACKET >		{			buf += t.image;			 		}		{			++brackets;			param += t.image;		}	|	LOOKAHEAD({ getToken(1).kind == DCBRACKET })		{			if (brackets == 0) 			return param;		}		t = < DCBRACKET >		{			buf += t.image;			 		}		{			--brackets;			param += t.image;		}	|	LOOKAHEAD({ getToken(1).kind == PIPE })		{			if (brackets == 0) 			return param;		}		t = < PIPE >		{			buf += t.image;			 		}		{			param += t.image;		}	|			t = < INDENT >		{			buf += t.image;			 		}		{			param += t.image;		}	|			t = < LIST >		{			buf += t.image;			 		}		{			param += t.image;		}	|			// Skip newlines
		t = < NEWLINE >		{			buf += t.image;			 		}	|			t = < NOTSPACE >		{			buf += t.image;			 		}		{			param += t.image;		}	)+	{		return param;	}}String extLinkAlias() :{	Token t = null;	String alias = "";}{	(		t = < SPACE >		{			buf += t.image;			 		}		{			alias += t.image;		}	|			t = < ITALIC >		{			buf += t.image;			 		}		{			alias += t.image;		}	|			t = < BOLD >		{			buf += t.image;			 		}		{			alias += t.image;		}	|			t = < BOLDITALIC >		{			buf += t.image;			 		}		{			alias += t.image;		}	|			t = < OBRACKET >		{			buf += t.image;			 		}		{			alias += t.image;		}	|			t = < DOBRACKET >		{			buf += t.image;			 		}		{			alias += t.image;		}	|			t = < DOCURL >		{			buf += t.image;			 		}		{			alias += t.image;		}	|			t = < DCCURL >		{			buf += t.image;			 		}		{			alias += t.image;		}	|			t = < SECTION_HEADING >		{			buf += t.image;			 		}		{			alias += t.image;		}	|			t = < SUBSECTION_HEADING >		{			buf += t.image;			 		}		{			alias += t.image;		}	|			t = < SUB_SUBSECTION_HEADING >		{			buf += t.image;			 		}		{			alias += t.image;		}	|			t = < HR >		{			buf += t.image;			 		}		{			alias += t.image;		}	|			t = < PIPE >		{			buf += t.image;			 		}		{			alias += t.image;		}	|			t = < INDENT >		{			buf += t.image;			 		}		{			alias += t.image;		}	|			t = < LIST >		{			buf += t.image;			 		}		{			alias += t.image;		}	|			// Skip newlines
		t = < NEWLINE >		{			buf += t.image;			 		}	|			t = < NOTSPACE >		{			buf += t.image;			 		}		{			alias += t.image;		}	)+	{		return alias;	}}String exturl() :{	Token t = null;	String url = "";}{	(		t = < INDENT >		{			buf += t.image;			 		}		{			url += t.image;		}	|			t = < LIST >		{			buf += t.image;			 		}		{			url += t.image;		}	|			t = < NOTSPACE >		{			buf += t.image;			 		}		{			url += t.image;		}	)+	{		return url;	}}String inturl() :{	Token t = null;	String url = "";}{	(		t = < INDENT >		{			buf += t.image;			 		}		{			url += t.image;		}	|			t = < LIST >		{			buf += t.image;			 		}		{			url += t.image;		}	|			t = < SPACE >		{			buf += t.image;			 		}		{			url += t.image;		}	|	t = < NOTSPACE >		{			buf += t.image;			 		}		{			url += t.image;		}	)+	{		return url;	}}String stringTag(boolean addTag) :{	Token t = null;	String str = "";}{	(		t = < HR >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < DCCURL >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < CBRACKET >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < DCBRACKET >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < TABLE_COL_HEADING >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < TABLE_ROW_HEADING >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < TABLE_END >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < TABLE_CAPTION >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < TABLE_ROW >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < PIPE >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < INDENT >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < LIST >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < SECTION_HEADING >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < SUBSECTION_HEADING >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < SUB_SUBSECTION_HEADING >		{			buf += t.image;			 		}		{			str += t.image;		}	|			LOOKAHEAD({ getToken(1).kind == NEWLINE && 		!(getToken(2).kind == HR && 		getToken(3).kind == NEWLINE) && 		!(getToken(2).kind == SECTION_HEADING || 		getToken(2).kind == SUBSECTION_HEADING || 		getToken(2).kind == SUB_SUBSECTION_HEADING) && 		!(getToken(2).kind == INDENT) && 		!(getToken(2).kind == LIST) })		t = < NEWLINE >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < SPACE >		{			buf += t.image;			 		}		{			str += t.image;		}	|	t = < NOTSPACE >		{			buf += t.image;			 		}		{			str += t.image;		}	)+	{		if (addTag && !str.isEmpty())		{			c.addStringTag(str);		}		reset();		return str;	}}String stringTagWithoutNewline(boolean addTag) :{	Token t = null;	String str = "";}{	(		t = < HR >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < DCCURL >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < CBRACKET >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < DCBRACKET >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < TABLE_COL_HEADING >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < TABLE_ROW_HEADING >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < TABLE_END >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < TABLE_CAPTION >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < TABLE_ROW >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < PIPE >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < INDENT >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < LIST >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < SPACE >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < NOTSPACE >		{			buf += t.image;			 		}		{			str += t.image;		}	)+	{		if (addTag && !str.isEmpty())		{			c.addStringTag(str);		}		reset();		return str;	}}String stringTagWithoutNewlineAndPipe(boolean addTag) :{	Token t = null;	String str = "";}{	(		t = < HR >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < DCCURL >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < CBRACKET >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < DCBRACKET >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < INDENT >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < LIST >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < SPACE >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < NOTSPACE >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < TABLE_COL_HEADING >		{			buf += t.image;			 		}		{			str += t.image;		}	|			t = < TABLE_ROW_HEADING >		{			buf += t.image;			 		}		{			str += t.image;		}	)+	{		if (addTag && !str.isEmpty())		{			c.addStringTag(str);		}		reset();		return str;	}}SKIP :{	< TOC : "__TOC__" >|	< NOTOC : "__NOTOC__" >|	< FORCETOC : "__FORCETOC__" >}TOKEN :{	< REFOPEN :		"<ref"		(			" "		|	"\t"		)*		(			"name=\"" (~[ "\"" ])+ "\""		)?		(			" "		|	"\t"		)*		">" >|	< REFCLOSE : "</ref>" >|	< TABLE_START :		"{|"		(			" "		|	"\t"		)* >|	< TABLE_END : "|}" >|	< TABLE_CAPTION :		"|+"		(			" "		|	"\t"		)* >|	< TABLE_ROW :		"|-"		(			" "		|	"\t"		)* >|	< TABLE_COL_HEADING :		(			"!"			(				" "			|	"\t"			)*		)	|		(			"!"			(				" "			|	"\t"			)*			"scope=\"col\""			(				" "			|	"\t"			)*		) >|	< TABLE_ROW_HEADING :		(			"!"			(				" "			|	"\t"			)*		)	|		(			"!"			(				" "			|	"\t"			)*			"scope=\"row\""			(				" "			|	"\t"			)*		) >|	< DOCURL : "{{" >|	< DCCURL : "}}" >|	< OBRACKET : "[" >|	< DOBRACKET : "[[" >|	< CBRACKET : "]" >|	< DCBRACKET : "]]" >|	< ITALIC : "''" >|	< BOLD : "'''" >|	< BOLDITALIC : "'''''" >|	< SECTION_HEADING : "==" >|	< SUBSECTION_HEADING : "===" >|	< SUB_SUBSECTION_HEADING : "====" >|	< LIST : "*" >|	< INDENT : ":" >|	< HR : "----" >|	< NEWLINE :		"\r\n"	|	"\r"	|	"\n" >|	< PIPE : "|" >|	< SPACE : " " >|	< NOTSPACE : ~[ " " ] >}
