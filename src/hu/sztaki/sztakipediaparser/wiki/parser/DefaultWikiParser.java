/* Generated By:JavaCC: Do not edit this line. DefaultWikiParser.java */
package hu.sztaki.sztakipediaparser.wiki.parser;
import hu.sztaki.sztakipediaparser.wiki.converter.IWikiConverter;
import hu.sztaki.sztakipediaparser.wiki.tags.*;

public class DefaultWikiParser implements IWikiParser, DefaultWikiParserConstants {
  private IWikiConverter c;

  public String parse(IWikiConverter c) throws ParseException, TokenMgrError
  {
    this.c = c;
    start();
    StringBuilder b = new StringBuilder();
    c.render(b);
    return b.toString();
  }

  final public void start() throws ParseException {
  Token url = null;
  Token alias = null;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OBRACKET:
      case OBRACKET2:
      case H_WHITESPACE:
      case V_WHITESPACE:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OBRACKET2:
        InternalLink(c);
        break;
      case OBRACKET:
        ExternalLink(c);
        break;
      case H_WHITESPACE:
        jj_consume_token(H_WHITESPACE);
        break;
      case V_WHITESPACE:
        jj_consume_token(V_WHITESPACE);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(0);
  }

// Parse internal links, e.g. [[Texas|Lone Star State]]  final public void InternalLink(IWikiConverter c) throws ParseException {
  Token url = null;
  Token alias = null;
  boolean pipe = false;
    jj_consume_token(OBRACKET2);
    url = jj_consume_token(INT_URL);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT_PIPE:
      jj_consume_token(INT_PIPE);
      pipe = true;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT_ALIAS:
        alias = jj_consume_token(INT_ALIAS);
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT_ALIAS_CLOSE:
      jj_consume_token(INT_ALIAS_CLOSE);
      break;
    case INT_CLOSE:
      jj_consume_token(INT_CLOSE);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    // Store raw wikitext
    String wikitext = "[[" + url.image;
    if(pipe)
    {
      wikitext += "|";
    }

    if (alias != null)
    {
      wikitext += alias.image;
    }
    wikitext += "]]";
    // Create anchor tag
    if (alias != null)
    {
      c.addInternalLinkTag(url.image, alias.image, wikitext);
    }
    else
    {
      c.addInternalLinkTag(url.image, null, wikitext);
    }
  }

// Parse External Wikilinks, e.g. [http://www.sztaki.hu SZTAKI]
  final public void ExternalLink(IWikiConverter c) throws ParseException {
  Token url = null;
  Token alias = null;
    jj_consume_token(OBRACKET);
    url = jj_consume_token(EXT_URL);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXT_H_WHITESPACE:
      jj_consume_token(EXT_H_WHITESPACE);
      alias = jj_consume_token(EXT_ALIAS);
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXT_ALIAS_CLOSE:
      jj_consume_token(EXT_ALIAS_CLOSE);
      break;
    case EXT_CLOSE:
      jj_consume_token(EXT_CLOSE);
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    // Store raw wikitext
    String wikitext = "[" + url.image;
    if (alias != null)
    {
      wikitext += " " + alias.image;
    }
    wikitext += "]";
    // Create anchor tag
    if (alias != null)
    {
      c.addExternalLinkTag(url.image, alias.image, false, wikitext);
    }
    else
    {
      c.addExternalLinkTag(url.image, null, false, wikitext);
    }
  }

  /** Generated Token Manager. */
  public DefaultWikiParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[7];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1e,0x1e,0x4000,0x1000,0x2400,0x80,0x220,};
   }

  /** Constructor with InputStream. */
  public DefaultWikiParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public DefaultWikiParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new DefaultWikiParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public DefaultWikiParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new DefaultWikiParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public DefaultWikiParser(DefaultWikiParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(DefaultWikiParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[15];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 7; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 15; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
