/* Generated By:JavaCC: Do not edit this line. JavaCCWikiParser.java */
package hu.sztaki.sztakipediaparser.wiki.parser.cc;

import java.util.logging.Logger;
import java.util.Stack;
import java.util.ArrayList;
import java.util.HashMap;
import hu.sztaki.sztakipediaparser.wiki.parser.*;
import hu.sztaki.sztakipediaparser.wiki.converter.IWikiInterpreter;
import hu.sztaki.sztakipediaparser.wiki.tags.*;

/**
 * Wiki parser generated by JavaCC.
 * 
 * @author <a href="mailto:sztakipedia@sztaki.hu">Tibor Olah</a>, <a
 *         href="http://sztaki.hu">MTA SZTAKI</a>
 * @since 2011
 */
public class JavaCCWikiParser implements IWikiParser, JavaCCWikiParserConstants {
        private IWikiInterpreter c;

        private Logger log = Logger.getLogger(this.getClass().getName());
        String buf = "";

        public void parse(IWikiInterpreter c)
        {
                this.c = c;
                try
                {
                        start();
                }
                catch (ParseException e)
                {
                        //log.severe(e.getMessage());
                        // Add raw wiki tag                        c.addRawWikiTag(buf);
                        reset();
                        Token t = getNextToken();
                        if (t != null && t.kind != JavaCCWikiParserConstants.EOF)
                        {
                                parse(c);
                        }
                }
                catch (TokenMgrError e)
                {
                        //log.severe(e.getMessage());
                        // Add raw wiki tag                        c.addRawWikiTag(buf);
                        reset();
                        Token t = getNextToken();
                        if (t != null && t.kind != JavaCCWikiParserConstants.EOF)
                        {
                                parse(c);
                        }
                }
        }

        public void reset()
        {
                buf = "";
        }

  final public void start() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OBRACKET:
        extLink();
        break;
      case DOBRACKET:
        intLink();
        break;
      case BOLDITALIC:
        boldItalic();
        break;
      case BOLD:
        bold();
        break;
      case ITALIC:
        italic();
        break;
      case DOCURL:
        template();
        break;
      case TABLE_START:
        table();
        break;
      case REFOPEN:
        reference();
        break;
      default:
        jj_la1[0] = jj_gen;
        if (jj_2_1(2)) {
          list();
        } else if (jj_2_2(2)) {
          heading();
        } else if (jj_2_3(3)) {
          hr();
        } else if (jj_2_4(3)) {
          indent();
        } else if (jj_2_5(1)) {
          stringTag(true);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      if (jj_2_6(1)) {
        ;
      } else {
        break label_1;
      }
    }
    jj_consume_token(0);
  }

  final public void reference() throws ParseException {
        Token t = null;
        String str = "";
        int depth = 0;
    t = jj_consume_token(REFOPEN);
                buf += t.image;
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REFOPEN:
        t = jj_consume_token(REFOPEN);
                        buf += t.image;
                        str += t.image;
                        ++depth;
        break;
      case REFCLOSE:
        t = jj_consume_token(REFCLOSE);
                        buf += t.image;
                        if (depth == 0)
                        {
                                c.addReferenceTag(str);
                                reset();
                                {if (true) return;}
                        }
                        else
                        {
                                --depth;
                                str += t.image;
                        }
        break;
      case TABLE_START:
        t = jj_consume_token(TABLE_START);
                        buf += t.image;
                        str += t.image;
        break;
      case TABLE_END:
        t = jj_consume_token(TABLE_END);
                        buf += t.image;
                        str += t.image;
        break;
      case TABLE_CAPTION:
        t = jj_consume_token(TABLE_CAPTION);
                        buf += t.image;
                        str += t.image;
        break;
      case TABLE_ROW:
        t = jj_consume_token(TABLE_ROW);
                        buf += t.image;
                        str += t.image;
        break;
      case TABLE_COL_HEADING:
        t = jj_consume_token(TABLE_COL_HEADING);
                        buf += t.image;
                        str += t.image;
        break;
      case TABLE_ROW_HEADING:
        t = jj_consume_token(TABLE_ROW_HEADING);
                        buf += t.image;
                        str += t.image;
        break;
      case DOCURL:
        t = jj_consume_token(DOCURL);
                        buf += t.image;
                        str += t.image;
        break;
      case DCCURL:
        t = jj_consume_token(DCCURL);
                        buf += t.image;
                        str += t.image;
        break;
      case OBRACKET:
        t = jj_consume_token(OBRACKET);
                        buf += t.image;
                        str += t.image;
        break;
      case DOBRACKET:
        t = jj_consume_token(DOBRACKET);
                        buf += t.image;
                        str += t.image;
        break;
      case CBRACKET:
        t = jj_consume_token(CBRACKET);
                        buf += t.image;
                        str += t.image;
        break;
      case DCBRACKET:
        t = jj_consume_token(DCBRACKET);
                        buf += t.image;
                        str += t.image;
        break;
      case ITALIC:
        t = jj_consume_token(ITALIC);
                        buf += t.image;
                        str += t.image;
        break;
      case BOLD:
        t = jj_consume_token(BOLD);
                        buf += t.image;
                        str += t.image;
        break;
      case BOLDITALIC:
        t = jj_consume_token(BOLDITALIC);
                        buf += t.image;
                        str += t.image;
        break;
      case SECTION_HEADING:
        t = jj_consume_token(SECTION_HEADING);
                        buf += t.image;
                        str += t.image;
        break;
      case SUBSECTION_HEADING:
        t = jj_consume_token(SUBSECTION_HEADING);
                        buf += t.image;
                        str += t.image;
        break;
      case SUB_SUBSECTION_HEADING:
        t = jj_consume_token(SUB_SUBSECTION_HEADING);
                        buf += t.image;
                        str += t.image;
        break;
      case LIST:
        t = jj_consume_token(LIST);
                        buf += t.image;
                        str += t.image;
        break;
      case INDENT:
        t = jj_consume_token(INDENT);
                        buf += t.image;
                        str += t.image;
        break;
      case HR:
        t = jj_consume_token(HR);
                        buf += t.image;
                        str += t.image;
        break;
      case NEWLINE:
        t = jj_consume_token(NEWLINE);
                        buf += t.image;
                        str += t.image;
        break;
      case PIPE:
        t = jj_consume_token(PIPE);
                        buf += t.image;
                        str += t.image;
        break;
      case SPACE:
        t = jj_consume_token(SPACE);
                        buf += t.image;
                        str += t.image;
        break;
      case NOTSPACE:
        t = jj_consume_token(NOTSPACE);
                        buf += t.image;
                        str += t.image;
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REFOPEN:
      case REFCLOSE:
      case TABLE_START:
      case TABLE_END:
      case TABLE_CAPTION:
      case TABLE_ROW:
      case TABLE_COL_HEADING:
      case TABLE_ROW_HEADING:
      case DOCURL:
      case DCCURL:
      case OBRACKET:
      case DOBRACKET:
      case CBRACKET:
      case DCBRACKET:
      case ITALIC:
      case BOLD:
      case BOLDITALIC:
      case SECTION_HEADING:
      case SUBSECTION_HEADING:
      case SUB_SUBSECTION_HEADING:
      case LIST:
      case INDENT:
      case HR:
      case NEWLINE:
      case PIPE:
      case SPACE:
      case NOTSPACE:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
    }
  }

  final public void table() throws ParseException {
        Token t = null;
        String tableParams = "";
        String caption = "";
    // Start table with {|
            t = jj_consume_token(TABLE_START);
                buf += t.image;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TABLE_END:
    case TABLE_CAPTION:
    case TABLE_ROW:
    case TABLE_COL_HEADING:
    case TABLE_ROW_HEADING:
    case DCCURL:
    case CBRACKET:
    case DCBRACKET:
    case LIST:
    case INDENT:
    case HR:
    case PIPE:
    case SPACE:
    case NOTSPACE:
      tableParams = tableParams();
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    t = jj_consume_token(NEWLINE);
                buf += t.image;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TABLE_CAPTION:
      t = jj_consume_token(TABLE_CAPTION);
                        buf += t.image;
      caption = tableCaption();
      t = jj_consume_token(NEWLINE);
                        buf += t.image;
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
                // Start a new table in the converter
                c.startTable(tableParams, caption);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TABLE_COL_HEADING:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_3;
      }
      tableColHeading();
    }
    label_4:
    while (true) {
      tableRow();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TABLE_ROW:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_4;
      }
    }
    // End of table marked by |}
            t = jj_consume_token(TABLE_END);
                buf += t.image;
                c.endTable();
                reset();
  }

  final public String tableParams() throws ParseException {
        Token t = null;
        String params = "";
    params = stringTagWithoutNewline(false);
                {if (true) return params;}
    throw new Error("Missing return statement in function");
  }

  final public String tableCaption() throws ParseException {
        Token t = null;
        String caption = "";
    caption = stringTagWithoutNewline(false);
                {if (true) return caption;}
    throw new Error("Missing return statement in function");
  }

  final public void tableColHeading() throws ParseException {
        Token t = null;
        String heading = "";
        String params = "";
    // Start of the heading
            t = jj_consume_token(TABLE_COL_HEADING);
                buf += t.image;
    // Optional format modifiers
            //[ params = stringTagWithoutNewlineAndPipe(false) t = < PIPE > {   } ]
            // Heading content
            heading = stringTagWithoutNewline(false);
    // Closing new line
            t = jj_consume_token(NEWLINE);
                buf += t.image;
                c.addTableColHeading(heading, params);
  }

  final public void tableRow() throws ParseException {
        Token t = null;
        String params = "";
    // Start of a row
            t = jj_consume_token(TABLE_ROW);
                buf += t.image;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TABLE_END:
    case TABLE_CAPTION:
    case TABLE_ROW:
    case TABLE_COL_HEADING:
    case TABLE_ROW_HEADING:
    case DCCURL:
    case CBRACKET:
    case DCBRACKET:
    case LIST:
    case INDENT:
    case HR:
    case PIPE:
    case SPACE:
    case NOTSPACE:
      params = stringTagWithoutNewline(false);
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    t = jj_consume_token(NEWLINE);
                buf += t.image;
                c.startTableRow(params);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TABLE_COL_HEADING:
    case TABLE_ROW_HEADING:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TABLE_COL_HEADING:
        label_5:
        while (true) {
          tableColHeading();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case TABLE_COL_HEADING:
            ;
            break;
          default:
            jj_la1[8] = jj_gen;
            break label_5;
          }
        }
        break;
      case TABLE_ROW_HEADING:
        tableRowHeading();
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PIPE:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_6;
      }
      tableCell();
    }
                c.endTableRow();
  }

  final public void tableRowHeading() throws ParseException {
        Token t = null;
        String heading = "";
        String params = "";
    // Start of the heading
            t = jj_consume_token(TABLE_ROW_HEADING);
                buf += t.image;
    // Optional format modifiers
            //[ params = stringTagWithoutNewlineAndPipe(false) t = < PIPE > {   } ]
            // Heading content
            heading = stringTagWithoutNewline(false);
    // Closing new line
            t = jj_consume_token(NEWLINE);
                buf += t.image;
                c.addTableRowHeading(heading, params);
  }

  final public void tableCell() throws ParseException {
        Token t = null;
        String params = "";
        String content = "";
        String content2 = "";
    t = jj_consume_token(PIPE);
                buf += t.image;
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TABLE_COL_HEADING:
      case TABLE_ROW_HEADING:
      case DCCURL:
      case CBRACKET:
      case DCBRACKET:
      case LIST:
      case INDENT:
      case HR:
      case SPACE:
      case NOTSPACE:
        content2 = stringTagWithoutNewlineAndPipe(false);
                        content += content2;
        break;
      default:
        jj_la1[12] = jj_gen;
        if (getToken(1).kind == PIPE && getToken(2).kind != PIPE) {
          t = jj_consume_token(PIPE);
                                buf += t.image;
                                content += t.image;
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case PIPE:
            t = jj_consume_token(PIPE);
                                buf += t.image;
            t = jj_consume_token(PIPE);
                                buf += t.image;
                                c.addTableCell(content, params);
                                content = "";
                                content2 = "";
                                params = "";
            break;
          default:
            jj_la1[13] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
      if (jj_2_7(1)) {
        ;
      } else {
        break label_7;
      }
    }
    t = jj_consume_token(NEWLINE);
                buf += t.image;
                c.addTableCell(content, params);
  }

  final public void template() throws ParseException {
        Token t = null;
        int curls = 0;
        String str = "";
        boolean multiline = false;
    t = jj_consume_token(DOCURL);
                buf += t.image;
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOCURL:
        t = jj_consume_token(DOCURL);
                        buf += t.image;
                        str += t.image;
                        ++curls;
        break;
      case DCCURL:
        t = jj_consume_token(DCCURL);
                        buf += t.image;
                        if (curls > 0)
                        {
                                str += t.image;
                                --curls;
                        }
                        else
                        {
                                if (!str.isEmpty())
                                {
                                        c.addTemplate(str, multiline);
                                        reset();
                                }
                                {if (true) return;}
                        }
        break;
      case SPACE:
        t = jj_consume_token(SPACE);
                        buf += t.image;
                        str += t.image;
        break;
      case ITALIC:
        t = jj_consume_token(ITALIC);
                        buf += t.image;
                        str += t.image;
        break;
      case BOLD:
        t = jj_consume_token(BOLD);
                        buf += t.image;
                        str += t.image;
        break;
      case BOLDITALIC:
        t = jj_consume_token(BOLDITALIC);
                        buf += t.image;
                        str += t.image;
        break;
      case OBRACKET:
        t = jj_consume_token(OBRACKET);
                        buf += t.image;
                        str += t.image;
        break;
      case DOBRACKET:
        t = jj_consume_token(DOBRACKET);
                        buf += t.image;
                        str += t.image;
        break;
      case CBRACKET:
        t = jj_consume_token(CBRACKET);
                        buf += t.image;
                        str += t.image;
        break;
      case DCBRACKET:
        t = jj_consume_token(DCBRACKET);
                        buf += t.image;
                        str += t.image;
        break;
      case SECTION_HEADING:
        t = jj_consume_token(SECTION_HEADING);
                        buf += t.image;
                        str += t.image;
        break;
      case SUBSECTION_HEADING:
        t = jj_consume_token(SUBSECTION_HEADING);
                        buf += t.image;
                        str += t.image;
        break;
      case SUB_SUBSECTION_HEADING:
        t = jj_consume_token(SUB_SUBSECTION_HEADING);
                        buf += t.image;
                        str += t.image;
        break;
      case HR:
        t = jj_consume_token(HR);
                        buf += t.image;
                        str += t.image;
        break;
      case INDENT:
        t = jj_consume_token(INDENT);
                        buf += t.image;
                        str += t.image;
        break;
      case TABLE_COL_HEADING:
        t = jj_consume_token(TABLE_COL_HEADING);
                        buf += t.image;
                        str += t.image;
        break;
      case TABLE_ROW_HEADING:
        t = jj_consume_token(TABLE_ROW_HEADING);
                        buf += t.image;
                        str += t.image;
        break;
      case TABLE_START:
        t = jj_consume_token(TABLE_START);
                        buf += t.image;
                        str += t.image;
        break;
      case TABLE_END:
        t = jj_consume_token(TABLE_END);
                        buf += t.image;
                        str += t.image;
        break;
      case TABLE_CAPTION:
        t = jj_consume_token(TABLE_CAPTION);
                        buf += t.image;
                        str += t.image;
        break;
      case TABLE_ROW:
        t = jj_consume_token(TABLE_ROW);
                        buf += t.image;
                        str += t.image;
        break;
      case PIPE:
        t = jj_consume_token(PIPE);
                        buf += t.image;
                        str += t.image;
        break;
      case NEWLINE:
        t = jj_consume_token(NEWLINE);
                        buf += t.image;
                        str += t.image;
                        multiline = true;
        break;
      case NOTSPACE:
        t = jj_consume_token(NOTSPACE);
                        buf += t.image;
                        str += t.image;
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TABLE_START:
      case TABLE_END:
      case TABLE_CAPTION:
      case TABLE_ROW:
      case TABLE_COL_HEADING:
      case TABLE_ROW_HEADING:
      case DOCURL:
      case DCCURL:
      case OBRACKET:
      case DOBRACKET:
      case CBRACKET:
      case DCBRACKET:
      case ITALIC:
      case BOLD:
      case BOLDITALIC:
      case SECTION_HEADING:
      case SUBSECTION_HEADING:
      case SUB_SUBSECTION_HEADING:
      case INDENT:
      case HR:
      case NEWLINE:
      case PIPE:
      case SPACE:
      case NOTSPACE:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_8;
      }
    }
  }

  final public void heading() throws ParseException {
        Token t = null;
        int type;
    t = jj_consume_token(NEWLINE);
                buf += t.image;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SECTION_HEADING:
      t = jj_consume_token(SECTION_HEADING);
                                buf += t.image;
                                c.startSectionHeading("==");
      inHeading();
      t = jj_consume_token(SECTION_HEADING);
                                buf += t.image;
                                type = 1;
      break;
    case SUBSECTION_HEADING:
      t = jj_consume_token(SUBSECTION_HEADING);
                                buf += t.image;
                                c.startSubSectionHeading("===");
      inHeading();
      t = jj_consume_token(SUBSECTION_HEADING);
                                buf += t.image;
                                type = 2;
      break;
    case SUB_SUBSECTION_HEADING:
      t = jj_consume_token(SUB_SUBSECTION_HEADING);
                                buf += t.image;
                                c.startSubSubSectionHeading("====");
      inHeading();
      t = jj_consume_token(SUB_SUBSECTION_HEADING);
                                buf += t.image;
                                type = 3;
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    if (getToken(1).kind == NEWLINE) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
                if (type == 1)
                c.endSectionHeading();
                else if (type == 2)
                c.endSubSectionHeading();
                else
                c.endSubSubSectionHeading();
                reset();
  }

  final public void inHeading() throws ParseException {
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OBRACKET:
        extLink();
        break;
      case DOBRACKET:
        intLink();
        break;
      case DOCURL:
        template();
        break;
      case BOLDITALIC:
        boldItalic();
        break;
      case BOLD:
        bold();
        break;
      case ITALIC:
        italic();
        break;
      case TABLE_END:
      case TABLE_CAPTION:
      case TABLE_ROW:
      case TABLE_COL_HEADING:
      case TABLE_ROW_HEADING:
      case DCCURL:
      case CBRACKET:
      case DCBRACKET:
      case LIST:
      case INDENT:
      case HR:
      case PIPE:
      case SPACE:
      case NOTSPACE:
        stringTagWithoutNewline(true);
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TABLE_END:
      case TABLE_CAPTION:
      case TABLE_ROW:
      case TABLE_COL_HEADING:
      case TABLE_ROW_HEADING:
      case DOCURL:
      case DCCURL:
      case OBRACKET:
      case DOBRACKET:
      case CBRACKET:
      case DCBRACKET:
      case ITALIC:
      case BOLD:
      case BOLDITALIC:
      case LIST:
      case INDENT:
      case HR:
      case PIPE:
      case SPACE:
      case NOTSPACE:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_9;
      }
    }
  }

  final public void extLink() throws ParseException {
        Token t = null;
        String url = "";
        String alias = "";
    t = jj_consume_token(OBRACKET);
                buf += t.image;
                url = exturl();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SPACE:
      t = jj_consume_token(SPACE);
                        buf += t.image;
                        // Parse alias
                        alias = extLinkAlias();
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
    t = jj_consume_token(CBRACKET);
                buf += t.image;
                c.addExternalLinkTag(url, alias, false, "");
                reset();
  }

  final public void intLink() throws ParseException {
        Token t = null;
        String url = "";
        ArrayList < String > params = new ArrayList < String > ();
    t = jj_consume_token(DOBRACKET);
                buf += t.image;
                // Get url
                url = inturl();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PIPE:
        ;
        break;
      default:
        jj_la1[20] = jj_gen;
        break label_10;
      }
      t = jj_consume_token(PIPE);
                        buf += t.image;
                        // Parse parameters
                        params.add(intLinkParam());
    }
    t = jj_consume_token(DCBRACKET);
                buf += t.image;
                c.addInternalLinkTag(url, params, "");
                reset();
  }

  final public void boldItalic() throws ParseException {
        Token t = null;
    t = jj_consume_token(BOLDITALIC);
                buf += t.image;
                c.startBoldTag("'''");
                c.startItalicTag("''");
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OBRACKET:
        extLink();
        break;
      case DOBRACKET:
        intLink();
        break;
      case DOCURL:
        template();
        break;
      case TABLE_START:
        table();
        break;
      default:
        jj_la1[21] = jj_gen;
        if (jj_2_8(2)) {
          heading();
        } else if (jj_2_9(3)) {
          hr();
        } else if (jj_2_10(3)) {
          indent();
        } else if (jj_2_11(1)) {
          stringTag(true);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      if (jj_2_12(1)) {
        ;
      } else {
        break label_11;
      }
    }
    t = jj_consume_token(BOLDITALIC);
                buf += t.image;
                c.endItalicTag();
                c.endBoldTag();
                reset();
  }

  final public void bold() throws ParseException {
        Token t = null;
    t = jj_consume_token(BOLD);
                buf += t.image;
                c.startBoldTag("'''");
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OBRACKET:
        extLink();
        break;
      case DOBRACKET:
        intLink();
        break;
      case ITALIC:
        italic();
        break;
      case DOCURL:
        template();
        break;
      case TABLE_START:
        table();
        break;
      default:
        jj_la1[22] = jj_gen;
        if (jj_2_13(2)) {
          heading();
        } else if (jj_2_14(3)) {
          hr();
        } else if (jj_2_15(3)) {
          indent();
        } else if (jj_2_16(1)) {
          stringTag(true);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      if (jj_2_17(1)) {
        ;
      } else {
        break label_12;
      }
    }
    t = jj_consume_token(BOLD);
                buf += t.image;
                c.endBoldTag();
                reset();
  }

  final public void italic() throws ParseException {
        Token t = null;
    t = jj_consume_token(ITALIC);
                buf += t.image;
                c.startItalicTag("''");
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OBRACKET:
        extLink();
        break;
      case DOBRACKET:
        intLink();
        break;
      case BOLD:
        bold();
        break;
      case DOCURL:
        template();
        break;
      case TABLE_START:
        table();
        break;
      default:
        jj_la1[23] = jj_gen;
        if (jj_2_18(2)) {
          heading();
        } else if (jj_2_19(3)) {
          hr();
        } else if (jj_2_20(3)) {
          indent();
        } else if (jj_2_21(1)) {
          stringTag(true);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      if (jj_2_22(1)) {
        ;
      } else {
        break label_13;
      }
    }
    t = jj_consume_token(ITALIC);
                buf += t.image;
                c.endItalicTag();
                reset();
  }

  final public void list() throws ParseException {
        Token t = null;
        int level = 0;
    label_14:
    while (true) {
      if (jj_2_23(4)) {
        t = jj_consume_token(NEWLINE);
                                        buf += t.image;
        t = jj_consume_token(LIST);
                                        buf += t.image;
        t = jj_consume_token(LIST);
                                        buf += t.image;
        t = jj_consume_token(LIST);
                                        buf += t.image;
                                        if (level == 2)
                                        {
                                                ++level;
                                                c.startList(true);
                                        }
                                        else if (level != 3)
                                        {
                                                {if (true) throw new ParseException();}
                                        }
      } else if (jj_2_24(3)) {
        t = jj_consume_token(NEWLINE);
                                        buf += t.image;
        t = jj_consume_token(LIST);
                                        buf += t.image;
        t = jj_consume_token(LIST);
                                        buf += t.image;
                                        if (level == 1)
                                        {
                                                ++level;
                                                c.startList(true);
                                        }
                                        else if (level == 3)
                                        {
                                                --level;
                                                c.endList();
                                        }
                                        else if (level != 2)
                                        {
                                                {if (true) throw new ParseException();}
                                        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NEWLINE:
          t = jj_consume_token(NEWLINE);
                                        buf += t.image;
          t = jj_consume_token(LIST);
                                        buf += t.image;
                                        if (level == 0)
                                        {
                                                ++level;
                                                c.startList(false);
                                        }
                                        else if (level == 2)
                                        {
                                                --level;
                                                c.endList();
                                        }
                                        else if (level == 3)
                                        {
                                                level -= 2;
                                                c.endList();
                                                c.endList();
                                        }
                                        else if (level != 1)
                                        {
                                                {if (true) throw new ParseException();}
                                        }
          break;
        default:
          jj_la1[24] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      listItem();
      if (jj_2_25(2)) {
        ;
      } else {
        break label_14;
      }
    }
    t = jj_consume_token(NEWLINE);
                buf += t.image;
                if (level == 1)
                {
                        c.endList();
                }
                else if (level == 2)
                {
                        c.endList();
                        c.endList();
                }
                else if (level == 3)
                {
                        c.endList();
                        c.endList();
                        c.endList();
                }
                reset();
  }

  final public void listItem() throws ParseException {
        Token t = null;
        String str = "";
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case HR:
        t = jj_consume_token(HR);
                        buf += t.image;
                        str += t.image;
        break;
      case SUB_SUBSECTION_HEADING:
        t = jj_consume_token(SUB_SUBSECTION_HEADING);
                        buf += t.image;
                        str += t.image;
        break;
      case SUBSECTION_HEADING:
        t = jj_consume_token(SUBSECTION_HEADING);
                        buf += t.image;
                        str += t.image;
        break;
      case SECTION_HEADING:
        t = jj_consume_token(SECTION_HEADING);
                        buf += t.image;
                        str += t.image;
        break;
      case BOLDITALIC:
        t = jj_consume_token(BOLDITALIC);
                        buf += t.image;
                        str += t.image;
        break;
      case BOLD:
        t = jj_consume_token(BOLD);
                        buf += t.image;
                        str += t.image;
        break;
      case ITALIC:
        t = jj_consume_token(ITALIC);
                        buf += t.image;
                        str += t.image;
        break;
      case DOCURL:
        t = jj_consume_token(DOCURL);
                        buf += t.image;
                        str += t.image;
        break;
      case DCCURL:
        t = jj_consume_token(DCCURL);
                        buf += t.image;
                        str += t.image;
        break;
      case OBRACKET:
        t = jj_consume_token(OBRACKET);
                        buf += t.image;
                        str += t.image;
        break;
      case CBRACKET:
        t = jj_consume_token(CBRACKET);
                        buf += t.image;
                        str += t.image;
        break;
      case DOBRACKET:
        t = jj_consume_token(DOBRACKET);
                        buf += t.image;
                        str += t.image;
        break;
      case DCBRACKET:
        t = jj_consume_token(DCBRACKET);
                        buf += t.image;
                        str += t.image;
        break;
      case TABLE_COL_HEADING:
        t = jj_consume_token(TABLE_COL_HEADING);
                        buf += t.image;
                        str += t.image;
        break;
      case TABLE_ROW_HEADING:
        t = jj_consume_token(TABLE_ROW_HEADING);
                        buf += t.image;
                        str += t.image;
        break;
      case TABLE_START:
        t = jj_consume_token(TABLE_START);
                        buf += t.image;
                        str += t.image;
        break;
      case TABLE_END:
        t = jj_consume_token(TABLE_END);
                        buf += t.image;
                        str += t.image;
        break;
      case TABLE_CAPTION:
        t = jj_consume_token(TABLE_CAPTION);
                        buf += t.image;
                        str += t.image;
        break;
      case TABLE_ROW:
        t = jj_consume_token(TABLE_ROW);
                        buf += t.image;
                        str += t.image;
        break;
      case PIPE:
        t = jj_consume_token(PIPE);
                        buf += t.image;
                        str += t.image;
        break;
      case INDENT:
        t = jj_consume_token(INDENT);
                        buf += t.image;
                        str += t.image;
        break;
      case LIST:
        t = jj_consume_token(LIST);
                        buf += t.image;
                        str += t.image;
        break;
      case SPACE:
        t = jj_consume_token(SPACE);
                        buf += t.image;
                        str += t.image;
        break;
      case NOTSPACE:
        t = jj_consume_token(NOTSPACE);
                        buf += t.image;
                        str += t.image;
        break;
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TABLE_START:
      case TABLE_END:
      case TABLE_CAPTION:
      case TABLE_ROW:
      case TABLE_COL_HEADING:
      case TABLE_ROW_HEADING:
      case DOCURL:
      case DCCURL:
      case OBRACKET:
      case DOBRACKET:
      case CBRACKET:
      case DCBRACKET:
      case ITALIC:
      case BOLD:
      case BOLDITALIC:
      case SECTION_HEADING:
      case SUBSECTION_HEADING:
      case SUB_SUBSECTION_HEADING:
      case LIST:
      case INDENT:
      case HR:
      case PIPE:
      case SPACE:
      case NOTSPACE:
        ;
        break;
      default:
        jj_la1[26] = jj_gen;
        break label_15;
      }
    }
                if (!str.isEmpty())
                {
                        c.addListItem(str);
                }
  }

  final public void indent() throws ParseException {
        Token t = null;
        int level = 0;
    t = jj_consume_token(NEWLINE);
                buf += t.image;
    t = jj_consume_token(INDENT);
                buf += t.image;
                ++level;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INDENT:
      t = jj_consume_token(INDENT);
                        buf += t.image;
                        ++level;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INDENT:
        t = jj_consume_token(INDENT);
                                buf += t.image;
                                ++level;
        break;
      default:
        jj_la1[27] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[28] = jj_gen;
      ;
    }
                c.addIndentTag(":", level);
                reset();
  }

  final public void hr() throws ParseException {
        Token t = null;
        String str = "";
    t = jj_consume_token(NEWLINE);
                buf += t.image;
                str += t.image;
    t = jj_consume_token(HR);
                buf += t.image;
                str += t.image;
    t = jj_consume_token(NEWLINE);
                buf += t.image;
                str += t.image;
                c.addHorizontalRuler("----");
                reset();
  }

  final public String intLinkParam() throws ParseException {
        Token t = null;
        String param = "";
        int brackets = 0;
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPACE:
        t = jj_consume_token(SPACE);
                        buf += t.image;
                        param += t.image;
        break;
      case ITALIC:
        t = jj_consume_token(ITALIC);
                        buf += t.image;
                        param += t.image;
        break;
      case BOLD:
        t = jj_consume_token(BOLD);
                        buf += t.image;
                        param += t.image;
        break;
      case BOLDITALIC:
        t = jj_consume_token(BOLDITALIC);
                        buf += t.image;
                        param += t.image;
        break;
      case SECTION_HEADING:
        t = jj_consume_token(SECTION_HEADING);
                        buf += t.image;
                        param += t.image;
        break;
      case SUBSECTION_HEADING:
        t = jj_consume_token(SUBSECTION_HEADING);
                        buf += t.image;
                        param += t.image;
        break;
      case SUB_SUBSECTION_HEADING:
        t = jj_consume_token(SUB_SUBSECTION_HEADING);
                        buf += t.image;
                        param += t.image;
        break;
      case HR:
        t = jj_consume_token(HR);
                        buf += t.image;
                        param += t.image;
        break;
      case DOCURL:
        t = jj_consume_token(DOCURL);
                        buf += t.image;
                        param += t.image;
        break;
      case DCCURL:
        t = jj_consume_token(DCCURL);
                        buf += t.image;
                        param += t.image;
        break;
      case OBRACKET:
        t = jj_consume_token(OBRACKET);
                        buf += t.image;
                        param += t.image;
        break;
      case CBRACKET:
        t = jj_consume_token(CBRACKET);
                        buf += t.image;
                        param += t.image;
        break;
      case DOBRACKET:
        t = jj_consume_token(DOBRACKET);
                        buf += t.image;
                        ++brackets;
                        param += t.image;
        break;
      default:
        jj_la1[29] = jj_gen;
        if (getToken(1).kind == DCBRACKET) {
                        if (brackets == 0)
                        {if (true) return param;}
          t = jj_consume_token(DCBRACKET);
                        buf += t.image;
                        --brackets;
                        param += t.image;
        } else if (getToken(1).kind == PIPE) {
                        if (brackets == 0)
                        {if (true) return param;}
          t = jj_consume_token(PIPE);
                        buf += t.image;
                        param += t.image;
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case INDENT:
            t = jj_consume_token(INDENT);
                        buf += t.image;
                        param += t.image;
            break;
          case LIST:
            t = jj_consume_token(LIST);
                        buf += t.image;
                        param += t.image;
            break;
          case NEWLINE:
            // Skip newlines
                            t = jj_consume_token(NEWLINE);
                        buf += t.image;
            break;
          case NOTSPACE:
            t = jj_consume_token(NOTSPACE);
                        buf += t.image;
                        param += t.image;
            break;
          default:
            jj_la1[30] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
      if (jj_2_26(1)) {
        ;
      } else {
        break label_16;
      }
    }
                {if (true) return param;}
    throw new Error("Missing return statement in function");
  }

  final public String extLinkAlias() throws ParseException {
        Token t = null;
        String alias = "";
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPACE:
        t = jj_consume_token(SPACE);
                        buf += t.image;
                        alias += t.image;
        break;
      case ITALIC:
        t = jj_consume_token(ITALIC);
                        buf += t.image;
                        alias += t.image;
        break;
      case BOLD:
        t = jj_consume_token(BOLD);
                        buf += t.image;
                        alias += t.image;
        break;
      case BOLDITALIC:
        t = jj_consume_token(BOLDITALIC);
                        buf += t.image;
                        alias += t.image;
        break;
      case OBRACKET:
        t = jj_consume_token(OBRACKET);
                        buf += t.image;
                        alias += t.image;
        break;
      case DOBRACKET:
        t = jj_consume_token(DOBRACKET);
                        buf += t.image;
                        alias += t.image;
        break;
      case DOCURL:
        t = jj_consume_token(DOCURL);
                        buf += t.image;
                        alias += t.image;
        break;
      case DCCURL:
        t = jj_consume_token(DCCURL);
                        buf += t.image;
                        alias += t.image;
        break;
      case SECTION_HEADING:
        t = jj_consume_token(SECTION_HEADING);
                        buf += t.image;
                        alias += t.image;
        break;
      case SUBSECTION_HEADING:
        t = jj_consume_token(SUBSECTION_HEADING);
                        buf += t.image;
                        alias += t.image;
        break;
      case SUB_SUBSECTION_HEADING:
        t = jj_consume_token(SUB_SUBSECTION_HEADING);
                        buf += t.image;
                        alias += t.image;
        break;
      case HR:
        t = jj_consume_token(HR);
                        buf += t.image;
                        alias += t.image;
        break;
      case PIPE:
        t = jj_consume_token(PIPE);
                        buf += t.image;
                        alias += t.image;
        break;
      case INDENT:
        t = jj_consume_token(INDENT);
                        buf += t.image;
                        alias += t.image;
        break;
      case LIST:
        t = jj_consume_token(LIST);
                        buf += t.image;
                        alias += t.image;
        break;
      case NEWLINE:
        // Skip newlines
                        t = jj_consume_token(NEWLINE);
                        buf += t.image;
        break;
      case NOTSPACE:
        t = jj_consume_token(NOTSPACE);
                        buf += t.image;
                        alias += t.image;
        break;
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOCURL:
      case DCCURL:
      case OBRACKET:
      case DOBRACKET:
      case ITALIC:
      case BOLD:
      case BOLDITALIC:
      case SECTION_HEADING:
      case SUBSECTION_HEADING:
      case SUB_SUBSECTION_HEADING:
      case LIST:
      case INDENT:
      case HR:
      case NEWLINE:
      case PIPE:
      case SPACE:
      case NOTSPACE:
        ;
        break;
      default:
        jj_la1[32] = jj_gen;
        break label_17;
      }
    }
                {if (true) return alias;}
    throw new Error("Missing return statement in function");
  }

  final public String exturl() throws ParseException {
        Token t = null;
        String url = "";
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INDENT:
        t = jj_consume_token(INDENT);
                        buf += t.image;
                        url += t.image;
        break;
      case LIST:
        t = jj_consume_token(LIST);
                        buf += t.image;
                        url += t.image;
        break;
      case NOTSPACE:
        t = jj_consume_token(NOTSPACE);
                        buf += t.image;
                        url += t.image;
        break;
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LIST:
      case INDENT:
      case NOTSPACE:
        ;
        break;
      default:
        jj_la1[34] = jj_gen;
        break label_18;
      }
    }
                {if (true) return url;}
    throw new Error("Missing return statement in function");
  }

  final public String inturl() throws ParseException {
        Token t = null;
        String url = "";
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INDENT:
        t = jj_consume_token(INDENT);
                        buf += t.image;
                        url += t.image;
        break;
      case LIST:
        t = jj_consume_token(LIST);
                        buf += t.image;
                        url += t.image;
        break;
      case SPACE:
        t = jj_consume_token(SPACE);
                        buf += t.image;
                        url += t.image;
        break;
      case NOTSPACE:
        t = jj_consume_token(NOTSPACE);
                        buf += t.image;
                        url += t.image;
        break;
      default:
        jj_la1[35] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LIST:
      case INDENT:
      case SPACE:
      case NOTSPACE:
        ;
        break;
      default:
        jj_la1[36] = jj_gen;
        break label_19;
      }
    }
                {if (true) return url;}
    throw new Error("Missing return statement in function");
  }

  final public String stringTag(boolean addTag) throws ParseException {
        Token t = null;
        String str = "";
    label_20:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case HR:
        t = jj_consume_token(HR);
                        buf += t.image;
                        str += t.image;
        break;
      case DCCURL:
        t = jj_consume_token(DCCURL);
                        buf += t.image;
                        str += t.image;
        break;
      case CBRACKET:
        t = jj_consume_token(CBRACKET);
                        buf += t.image;
                        str += t.image;
        break;
      case DCBRACKET:
        t = jj_consume_token(DCBRACKET);
                        buf += t.image;
                        str += t.image;
        break;
      case TABLE_COL_HEADING:
        t = jj_consume_token(TABLE_COL_HEADING);
                        buf += t.image;
                        str += t.image;
        break;
      case TABLE_ROW_HEADING:
        t = jj_consume_token(TABLE_ROW_HEADING);
                        buf += t.image;
                        str += t.image;
        break;
      case TABLE_END:
        t = jj_consume_token(TABLE_END);
                        buf += t.image;
                        str += t.image;
        break;
      case TABLE_CAPTION:
        t = jj_consume_token(TABLE_CAPTION);
                        buf += t.image;
                        str += t.image;
        break;
      case TABLE_ROW:
        t = jj_consume_token(TABLE_ROW);
                        buf += t.image;
                        str += t.image;
        break;
      case PIPE:
        t = jj_consume_token(PIPE);
                        buf += t.image;
                        str += t.image;
        break;
      case INDENT:
        t = jj_consume_token(INDENT);
                        buf += t.image;
                        str += t.image;
        break;
      case LIST:
        t = jj_consume_token(LIST);
                        buf += t.image;
                        str += t.image;
        break;
      case SECTION_HEADING:
        t = jj_consume_token(SECTION_HEADING);
                        buf += t.image;
                        str += t.image;
        break;
      case SUBSECTION_HEADING:
        t = jj_consume_token(SUBSECTION_HEADING);
                        buf += t.image;
                        str += t.image;
        break;
      case SUB_SUBSECTION_HEADING:
        t = jj_consume_token(SUB_SUBSECTION_HEADING);
                        buf += t.image;
                        str += t.image;
        break;
      default:
        jj_la1[37] = jj_gen;
        if (getToken(1).kind == NEWLINE &&
                        !(getToken(2).kind == HR &&
                        getToken(3).kind == NEWLINE) &&
                        !(getToken(2).kind == SECTION_HEADING ||
                        getToken(2).kind == SUBSECTION_HEADING ||
                        getToken(2).kind == SUB_SUBSECTION_HEADING) &&
                        !(getToken(2).kind == INDENT) &&
                        !(getToken(2).kind == LIST)) {
          t = jj_consume_token(NEWLINE);
                        buf += t.image;
                        str += t.image;
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SPACE:
            t = jj_consume_token(SPACE);
                        buf += t.image;
                        str += t.image;
            break;
          case NOTSPACE:
            t = jj_consume_token(NOTSPACE);
                        buf += t.image;
                        str += t.image;
            break;
          default:
            jj_la1[38] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
      if (jj_2_27(1)) {
        ;
      } else {
        break label_20;
      }
    }
                if (addTag && !str.isEmpty())
                {
                        c.addStringTag(str);
                }
                reset();
                {if (true) return str;}
    throw new Error("Missing return statement in function");
  }

  final public String stringTagWithoutNewline(boolean addTag) throws ParseException {
        Token t = null;
        String str = "";
    label_21:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case HR:
        t = jj_consume_token(HR);
                        buf += t.image;
                        str += t.image;
        break;
      case DCCURL:
        t = jj_consume_token(DCCURL);
                        buf += t.image;
                        str += t.image;
        break;
      case CBRACKET:
        t = jj_consume_token(CBRACKET);
                        buf += t.image;
                        str += t.image;
        break;
      case DCBRACKET:
        t = jj_consume_token(DCBRACKET);
                        buf += t.image;
                        str += t.image;
        break;
      case TABLE_COL_HEADING:
        t = jj_consume_token(TABLE_COL_HEADING);
                        buf += t.image;
                        str += t.image;
        break;
      case TABLE_ROW_HEADING:
        t = jj_consume_token(TABLE_ROW_HEADING);
                        buf += t.image;
                        str += t.image;
        break;
      case TABLE_END:
        t = jj_consume_token(TABLE_END);
                        buf += t.image;
                        str += t.image;
        break;
      case TABLE_CAPTION:
        t = jj_consume_token(TABLE_CAPTION);
                        buf += t.image;
                        str += t.image;
        break;
      case TABLE_ROW:
        t = jj_consume_token(TABLE_ROW);
                        buf += t.image;
                        str += t.image;
        break;
      case PIPE:
        t = jj_consume_token(PIPE);
                        buf += t.image;
                        str += t.image;
        break;
      case INDENT:
        t = jj_consume_token(INDENT);
                        buf += t.image;
                        str += t.image;
        break;
      case LIST:
        t = jj_consume_token(LIST);
                        buf += t.image;
                        str += t.image;
        break;
      case SPACE:
        t = jj_consume_token(SPACE);
                        buf += t.image;
                        str += t.image;
        break;
      case NOTSPACE:
        t = jj_consume_token(NOTSPACE);
                        buf += t.image;
                        str += t.image;
        break;
      default:
        jj_la1[39] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TABLE_END:
      case TABLE_CAPTION:
      case TABLE_ROW:
      case TABLE_COL_HEADING:
      case TABLE_ROW_HEADING:
      case DCCURL:
      case CBRACKET:
      case DCBRACKET:
      case LIST:
      case INDENT:
      case HR:
      case PIPE:
      case SPACE:
      case NOTSPACE:
        ;
        break;
      default:
        jj_la1[40] = jj_gen;
        break label_21;
      }
    }
                if (addTag && !str.isEmpty())
                {
                        c.addStringTag(str);
                }
                reset();
                {if (true) return str;}
    throw new Error("Missing return statement in function");
  }

  final public String stringTagWithoutNewlineAndPipe(boolean addTag) throws ParseException {
        Token t = null;
        String str = "";
    label_22:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case HR:
        t = jj_consume_token(HR);
                        buf += t.image;
                        str += t.image;
        break;
      case DCCURL:
        t = jj_consume_token(DCCURL);
                        buf += t.image;
                        str += t.image;
        break;
      case CBRACKET:
        t = jj_consume_token(CBRACKET);
                        buf += t.image;
                        str += t.image;
        break;
      case DCBRACKET:
        t = jj_consume_token(DCBRACKET);
                        buf += t.image;
                        str += t.image;
        break;
      case INDENT:
        t = jj_consume_token(INDENT);
                        buf += t.image;
                        str += t.image;
        break;
      case LIST:
        t = jj_consume_token(LIST);
                        buf += t.image;
                        str += t.image;
        break;
      case SPACE:
        t = jj_consume_token(SPACE);
                        buf += t.image;
                        str += t.image;
        break;
      case NOTSPACE:
        t = jj_consume_token(NOTSPACE);
                        buf += t.image;
                        str += t.image;
        break;
      case TABLE_COL_HEADING:
        t = jj_consume_token(TABLE_COL_HEADING);
                        buf += t.image;
                        str += t.image;
        break;
      case TABLE_ROW_HEADING:
        t = jj_consume_token(TABLE_ROW_HEADING);
                        buf += t.image;
                        str += t.image;
        break;
      default:
        jj_la1[41] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TABLE_COL_HEADING:
      case TABLE_ROW_HEADING:
      case DCCURL:
      case CBRACKET:
      case DCBRACKET:
      case LIST:
      case INDENT:
      case HR:
      case SPACE:
      case NOTSPACE:
        ;
        break;
      default:
        jj_la1[42] = jj_gen;
        break label_22;
      }
    }
                if (addTag && !str.isEmpty())
                {
                        c.addStringTag(str);
                }
                reset();
                {if (true) return str;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_3R_113() {
    if (jj_scan_token(TABLE_COL_HEADING)) return true;
    return false;
  }

  private boolean jj_3R_75() {
    if (jj_scan_token(CBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_99() {
    if (jj_scan_token(ITALIC)) return true;
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_scan_token(DOCURL)) return true;
    return false;
  }

  private boolean jj_3R_93() {
    if (jj_scan_token(SUB_SUBSECTION_HEADING)) return true;
    return false;
  }

  private boolean jj_3R_112() {
    if (jj_scan_token(NOTSPACE)) return true;
    return false;
  }

  private boolean jj_3R_74() {
    if (jj_scan_token(DCCURL)) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_scan_token(HR)) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_111() {
    if (jj_scan_token(SPACE)) return true;
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_scan_token(HR)) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = getToken(1).kind == NEWLINE &&
                !(getToken(2).kind == HR &&
                getToken(3).kind == NEWLINE) &&
                !(getToken(2).kind == SECTION_HEADING ||
                getToken(2).kind == SUBSECTION_HEADING ||
                getToken(2).kind == SUB_SUBSECTION_HEADING) &&
                !(getToken(2).kind == INDENT) &&
                !(getToken(2).kind == LIST);
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_3R_101()) return true;
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_3R_100()) return true;
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_3R_99()) return true;
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_scan_token(SUB_SUBSECTION_HEADING)) return true;
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_3R_96()) return true;
    return false;
  }

  private boolean jj_3_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3_16()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_110() {
    if (jj_scan_token(LIST)) return true;
    return false;
  }

  private boolean jj_3R_92() {
    if (jj_scan_token(SUBSECTION_HEADING)) return true;
    return false;
  }

  private boolean jj_3R_27() {
    Token xsp;
    if (jj_3_27()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_27()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_scan_token(SUBSECTION_HEADING)) return true;
    return false;
  }

  private boolean jj_3R_109() {
    if (jj_scan_token(INDENT)) return true;
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_scan_token(SECTION_HEADING)) return true;
    return false;
  }

  private boolean jj_3R_98() {
    if (jj_scan_token(BOLD)) return true;
    return false;
  }

  private boolean jj_3R_108() {
    if (jj_scan_token(DCBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_91() {
    if (jj_scan_token(SECTION_HEADING)) return true;
    return false;
  }

  private boolean jj_3R_102() {
    if (jj_scan_token(REFOPEN)) return true;
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_scan_token(BOLDITALIC)) return true;
    return false;
  }

  private boolean jj_3R_90() {
    if (jj_scan_token(NOTSPACE)) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_107() {
    if (jj_scan_token(CBRACKET)) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_89() {
    if (jj_scan_token(SPACE)) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_56() {
    if (jj_scan_token(BOLD)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_3R_101()) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_3R_100()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_scan_token(NEWLINE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_91()) {
    jj_scanpos = xsp;
    if (jj_3R_92()) {
    jj_scanpos = xsp;
    if (jj_3R_93()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_3R_96()) return true;
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_3R_102()) return true;
    return false;
  }

  private boolean jj_3_12() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3_11()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_106() {
    if (jj_scan_token(DCCURL)) return true;
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_3R_101()) return true;
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_3R_100()) return true;
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_3R_99()) return true;
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_3R_98()) return true;
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_scan_token(NEWLINE)) return true;
    if (jj_scan_token(LIST)) return true;
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_3R_97()) return true;
    return false;
  }

  private boolean jj_3R_55() {
    if (jj_scan_token(ITALIC)) return true;
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_3R_96()) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3_6() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3_5()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_105() {
    if (jj_scan_token(HR)) return true;
    return false;
  }

  private boolean jj_3R_104() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_105()) {
    jj_scanpos = xsp;
    if (jj_3R_106()) {
    jj_scanpos = xsp;
    if (jj_3R_107()) {
    jj_scanpos = xsp;
    if (jj_3R_108()) {
    jj_scanpos = xsp;
    if (jj_3R_109()) {
    jj_scanpos = xsp;
    if (jj_3R_110()) {
    jj_scanpos = xsp;
    if (jj_3R_111()) {
    jj_scanpos = xsp;
    if (jj_3R_112()) {
    jj_scanpos = xsp;
    if (jj_3R_113()) {
    jj_scanpos = xsp;
    if (jj_3R_114()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_88() {
    if (jj_scan_token(NEWLINE)) return true;
    return false;
  }

  private boolean jj_3_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = getToken(1).kind == DCBRACKET;
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_67()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = getToken(1).kind == PIPE;
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_scan_token(SPACE)) return true;
    return false;
  }

  private boolean jj_3R_97() {
    if (jj_scan_token(BOLDITALIC)) return true;
    return false;
  }

  private boolean jj_3R_103() {
    Token xsp;
    if (jj_3R_104()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_104()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_87() {
    if (jj_scan_token(SUB_SUBSECTION_HEADING)) return true;
    return false;
  }

  private boolean jj_3R_86() {
    if (jj_scan_token(SUBSECTION_HEADING)) return true;
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_scan_token(NOTSPACE)) return true;
    return false;
  }

  private boolean jj_3_24() {
    if (jj_scan_token(NEWLINE)) return true;
    if (jj_scan_token(LIST)) return true;
    if (jj_scan_token(LIST)) return true;
    return false;
  }

  private boolean jj_3R_85() {
    if (jj_scan_token(SECTION_HEADING)) return true;
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_scan_token(NEWLINE)) return true;
    return false;
  }

  private boolean jj_3R_84() {
    if (jj_scan_token(LIST)) return true;
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_scan_token(LIST)) return true;
    return false;
  }

  private boolean jj_3R_100() {
    if (jj_scan_token(DOCURL)) return true;
    return false;
  }

  private boolean jj_3R_96() {
    if (jj_scan_token(DOBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_83() {
    if (jj_scan_token(INDENT)) return true;
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_scan_token(NEWLINE)) return true;
    if (jj_scan_token(HR)) return true;
    if (jj_scan_token(NEWLINE)) return true;
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_scan_token(INDENT)) return true;
    return false;
  }

  private boolean jj_3R_82() {
    if (jj_scan_token(PIPE)) return true;
    return false;
  }

  private boolean jj_3_23() {
    if (jj_scan_token(NEWLINE)) return true;
    if (jj_scan_token(LIST)) return true;
    if (jj_scan_token(LIST)) return true;
    if (jj_scan_token(LIST)) return true;
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_scan_token(PIPE)) return true;
    return false;
  }

  private boolean jj_3R_81() {
    if (jj_scan_token(TABLE_ROW)) return true;
    return false;
  }

  private boolean jj_3R_94() {
    if (jj_scan_token(INDENT)) return true;
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_scan_token(PIPE)) return true;
    return false;
  }

  private boolean jj_3_25() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_23()) {
    jj_scanpos = xsp;
    if (jj_3_24()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_80() {
    if (jj_scan_token(TABLE_CAPTION)) return true;
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_scan_token(DCBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_95() {
    if (jj_scan_token(OBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_23() {
    Token xsp;
    if (jj_3_25()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_25()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_79() {
    if (jj_scan_token(TABLE_END)) return true;
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_scan_token(PIPE)) return true;
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_scan_token(DOBRACKET)) return true;
    return false;
  }

  private boolean jj_3_7() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = getToken(1).kind == PIPE && getToken(2).kind != PIPE;
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_3R_103()) return true;
    return false;
  }

  private boolean jj_3R_101() {
    if (jj_scan_token(TABLE_START)) return true;
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_scan_token(TABLE_ROW_HEADING)) return true;
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_scan_token(NEWLINE)) return true;
    if (jj_scan_token(INDENT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_94()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_21() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3_20() {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_scan_token(CBRACKET)) return true;
    return false;
  }

  private boolean jj_3_19() {
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3_18() {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_3R_101()) return true;
    return false;
  }

  private boolean jj_3R_77() {
    if (jj_scan_token(TABLE_COL_HEADING)) return true;
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_3R_100()) return true;
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_3R_98()) return true;
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_3R_96()) return true;
    return false;
  }

  private boolean jj_3_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3_20()) {
    jj_scanpos = xsp;
    if (jj_3_21()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_scan_token(OBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_114() {
    if (jj_scan_token(TABLE_ROW_HEADING)) return true;
    return false;
  }

  private boolean jj_3R_76() {
    if (jj_scan_token(DCBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_scan_token(DCCURL)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public JavaCCWikiParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  /** Whether we are looking ahead. */
  private boolean jj_lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[43];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1cd050,0x7ffffff0,0x7ffffff0,0x77032f80,0x100,0x400,0x200,0x77032f80,0x400,0xc00,0xc00,0x10000000,0x67032c00,0x10000000,0x7effffc0,0x7effffc0,0xe00000,0x771fff80,0x771fff80,0x20000000,0x10000000,0xd040,0x4d040,0x8d040,0x8000000,0x77ffffc0,0x77ffffc0,0x2000000,0x2000000,0x24fdf000,0x4b000000,0x7ffcf000,0x7ffcf000,0x43000000,0x43000000,0x63000000,0x63000000,0x17e32f80,0x60000000,0x77032f80,0x77032f80,0x67032c00,0x67032c00,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[27];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public JavaCCWikiParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public JavaCCWikiParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new JavaCCWikiParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 43; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 43; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public JavaCCWikiParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new JavaCCWikiParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 43; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 43; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public JavaCCWikiParser(JavaCCWikiParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 43; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(JavaCCWikiParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 43; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = jj_lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[31];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 43; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 31; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 27; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
